package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var numericKeyboard = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–æ—Ç–∑—ã–≤—ã"),
		tgbotapi.NewKeyboardButton("–≤–æ–ø—Ä–æ—Å—ã"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"),
	),
)

var returnButton = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–Ω–∞–∑–∞–¥"),
	),
)

var (
	feedbackMessage = []string{"–°–ø–∞—Å–∏–±–æ! –î–ª—è –Ω–∞—Å –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ - –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –º—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ —Å—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å. –ü–∏—à–∏—Ç–µ —á–∞—â–µ, xo xo",
		"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å –Ω–∞–º–∏ –º–Ω–µ–Ω–∏–µ–º –æ –ø—Ä–æ–¥—É–∫—Ç–µ ORELE. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. –û–±–µ—â–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–≤–µ–¥–µ–º!",
		"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä ORELE. –ù–∞–¥–µ–µ–º—Å—è –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –ø—Ä–∏–¥—É—Ç—Å—è –≤–∞–º –ø–æ –¥—É—à–µ, –≤–µ–¥—å –≤—Å–µ –æ–Ω–∏ —Å–¥–µ–ª–∞–Ω—ã –¥–ª—è –≤–∞—Å. –£–ª—ã–±–∞–π—Ç–µ—Å—å, –≤—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã",
		"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –∏ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–µ—Ä–µ–¥–∞–¥–∏–º –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –æ—Ç–¥–µ–ª –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. Shine bright ‚ú®",
		"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤—ã–±–æ—Ä ORELE. –ú—ã –≤–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å—é —Å–≤–æ—é –ª—é–±–æ–≤—å –≤ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, –∏ –Ω–∞–º –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–∞—Å—Ç–∏—á–∫—É —Ç–µ–ø–ª–∞ –≤ –æ—Ç–≤–µ—Ç. –ü–∏—à–∏—Ç–µ –Ω–∞–º –ø–æ—á–∞—â–µ, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µü•∞",
		"–°–ø–∞—Å–∏–±–æ! ORELE —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∞—Å, –ø–æ—ç—Ç–æ–º—É –º—ã —á–∏—Ç–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –∏ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–µ–º—Å—è –∫ –∫–∞–∂–¥–æ–º—É –ø–æ–∂–µ–ª–∞–Ω–∏—é ‚ù§",
		"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ ORELE –¥–ª—è –∑–∞–±–æ—Ç—ã –æ –≤–∞—à–µ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—Ä–∞—Å–æ—Ç–µ. –ú—ã –Ω–µ –ø–æ–¥–≤–µ–¥–µ–º!",
		"–°–ø–∞—Å–∏–±–æ! –ú—ã –æ–±–æ–∂–∞–µ–º –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã –∏ —á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π. Stay true, stay you! –ê –º—ã –±—É–¥–µ–º –ª—É—á—à–µ –¥–ª—è –≤–∞—Å)",
		"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ –∏ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚ù§Ô∏è –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —á–∞—â–µ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö, —Ç–∞–º –º—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏ –¥–µ–ª–∏–º—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º",
		"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è –∏ —Ö–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã –≤ –¥—É—à–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –≤ –¥–æ–∂–¥–ª–∏–≤–æ–º –ü–∏—Ç–µ—Ä–µ‚ù§Ô∏è",
	}
	handlingMenu        = 0
	handlingFeedback    = 1
	handlingCooperation = 2
	handlingQuestions   = 3
	handlingDialog      = 4
	masterChat          int64
)

func main() {
	master_chat, err := strconv.Atoi(os.Getenv("master_chat"))
	if err != nil {
		log.Println("error getting masterchat ID")
		os.Exit(1)
	}
	masterChat = int64(master_chat)
	botToken := os.Getenv("bot_token")
	chatStates := map[int64]int{}
	openChats := []int64{}
	LoadChatIds("chatIds.txt", &openChats, chatStates)
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false

	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	for update := range updates {
		if update.Message == nil {
			continue
		}
		if (strings.Contains(update.Message.Text, "[–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞]") || strings.Contains(update.Message.Caption, "[–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞]")) && update.Message.Chat.ID == masterChat {
			update.Message.Text = strings.ReplaceAll(update.Message.Text, "[–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞]", "")
			massiveMessage(update.Message, openChats, bot)
			continue
		}
		if (update.Message.Chat.ID == masterChat) && (update.Message.ReplyToMessage != nil) && (strings.Contains(update.Message.ReplyToMessage.Text, "[–≤–æ–ø—Ä–æ—Å—ã]")) {
			strings := strings.Fields(update.Message.ReplyToMessage.Text)
			responseChatId := strings[len(strings)-3]
			responseMessage := strings[len(strings)-1]
			respChat, err := strconv.Atoi(responseChatId)
			if err != nil {
				log.Println(err)
				return
			}
			messageToResponse, err := strconv.Atoi(responseMessage)
			if err != nil {
				log.Println(err)
				return
			}
			msg := tgbotapi.NewMessage(int64(respChat), update.Message.Text)
			msg.ReplyToMessageID = messageToResponse
			bot.Send(msg)

		}

		switch update.Message.Text {
		case "/start":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –±—Ä–µ–Ω–¥–∞ ORELE, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n(–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ)")
			if _, ok := chatStates[update.Message.Chat.ID]; !ok {
				chatStates[update.Message.Chat.ID] = handlingMenu
				openChats = append(openChats, update.Message.Chat.ID)
				AddOrCreateChatIDS(update.Message.Chat.ID)
			}
			msg.ReplyMarkup = numericKeyboard
			bot.Send(msg)
		case "–Ω–∞–∑–∞–¥":
			chatStates[update.Message.Chat.ID] = handlingMenu
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –∏–º–µ–Ω–Ω–æ –ø–æ–≤–æ–¥—É –≤—ã –∑–¥–µ—Å—å")
			msg.ReplyMarkup = numericKeyboard
			bot.Send(msg)
		case "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú—ã —É–∂–µ –∑–∞–∏–Ω—Ç—Ä–∏–≥–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ https://docs.google.com/forms/d/1ChSWUfvXzgYb3WQ5hLV1m-QwaicOcLrstPEHPsolaSU/viewform?edit_requested=true. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –Ω–∞—à—É –ø–æ—á—Ç—É pr.orelecosmetics@mail.ru")
			chatStates[update.Message.Chat.ID] = handlingCooperation
			msg.ReplyMarkup = returnButton
			bot.Send(msg)
		case "–æ—Ç–∑—ã–≤—ã":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ –≤–∞—à–∏—Ö –º—ã—Å–ª—è—Ö –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏ ORELE. –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
			chatStates[update.Message.Chat.ID] = handlingFeedback
			msg.ReplyMarkup = returnButton
			bot.Send(msg)
		case "–≤–æ–ø—Ä–æ—Å—ã":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –±—Ä–µ–Ω–¥–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º, –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤ –ª–∏–Ω–µ–π–∫–µ ORELE —Å–ª–µ–¥—É—é—â–∏–º")
			chatStates[update.Message.Chat.ID] = handlingQuestions
			msg.ReplyToMessageID = update.Message.MessageID
			msg.ReplyMarkup = returnButton
			bot.Send(msg)
		default:
			if chatStates[update.Message.Chat.ID] == handlingFeedback {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, —Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å")
				r := rand.New(rand.NewSource(time.Now().Unix()))
				randomMessageIdx := r.Intn(len(feedbackMessage))
				msg.ReplyToMessageID = update.Message.MessageID
				msg.Text = feedbackMessage[randomMessageIdx]
				msg.ReplyMarkup = numericKeyboard
				bot.Send(msg)
				chatStates[update.Message.Chat.ID] = handlingMenu
				resp := craftMessage("[–æ—Ç–∑—ã–≤—ã]", update.Message)
				msgMaster := tgbotapi.NewMessage(masterChat, resp)
				bot.Send(msgMaster)
				continue
			}
			if chatStates[update.Message.Chat.ID] == handlingCooperation {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –±—Ä–µ–Ω–¥—É ORELE! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–µ–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–µ–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.")
				msg.ReplyToMessageID = update.Message.MessageID
				msg.Text = "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è, –∫–∞–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
				msg.ReplyMarkup = numericKeyboard
				bot.Send(msg)
				chatStates[update.Message.Chat.ID] = handlingMenu
				resp := craftMessage("[—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ]", update.Message)
				msgMaster := tgbotapi.NewMessage(masterChat, resp)
				bot.Send(msgMaster)
				continue
			}
			if chatStates[update.Message.Chat.ID] == handlingQuestions || chatStates[update.Message.Chat.ID] == handlingDialog {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
				if chatStates[update.Message.Chat.ID] == handlingQuestions {
					msg.Text = "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –ª–∏—á–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚ù§Ô∏è. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥"
					chatStates[update.Message.Chat.ID] = handlingDialog
				}
				msg.ReplyMarkup = returnButton
				bot.Send(msg)
				resp := craftMessage("[–≤–æ–ø—Ä–æ—Å—ã]", update.Message)
				msgMaster := tgbotapi.NewMessage(masterChat, resp)
				bot.Send(msgMaster)
				continue
			}
			if chatStates[update.Message.Chat.ID] == handlingMenu && update.Message.Chat.ID != masterChat {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
				msg.ReplyMarkup = numericKeyboard
				bot.Send(msg)
				resp := craftMessage("[–≤–æ–ø—Ä–æ—Å—ã]", update.Message)
				msgMaster := tgbotapi.NewMessage(masterChat, resp)
				bot.Send(msgMaster)
			}
		}
	}
}

func craftMessage(tag string, message *tgbotapi.Message) string {
	var answer strings.Builder
	answer.Write([]byte(tag))
	answer.Write([]byte("\nMessage: "))
	answer.Write([]byte(message.Text))
	answer.Write([]byte("\nFrom: @"))
	answer.Write([]byte(message.From.UserName))
	answer.Write([]byte("\nChat_id: "))
	answer.Write([]byte(fmt.Sprint(message.Chat.ID)))
	answer.Write([]byte("\nMessage_id: "))
	answer.Write([]byte(fmt.Sprint(message.MessageID)))
	return answer.String()
}

func massiveMessage(message *tgbotapi.Message, chats []int64, bot *tgbotapi.BotAPI) {
	var hasImage bool
	var files []interface{}
	hasImage = false
	log.Println("message len:", len(message.Photo))
	log.Println(message.Photo)
	if len(message.Photo) != 0 {
		message.Caption = strings.ReplaceAll(message.Caption, "[–º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞]", "")
		fileId := message.Photo[0].FileID
		var FileID tgbotapi.FileID = tgbotapi.FileID(fileId)
		newPhotoMsg := tgbotapi.InputMediaPhoto{}
		newPhotoMsg.Type = "photo"
		newPhotoMsg.Media = FileID
		newPhotoMsg.Caption = message.Caption
		hasImage = true
		files = append(files, newPhotoMsg)
	}
	for _, v := range chats {
		if !hasImage {
			msg := tgbotapi.NewMessage(v, message.Text)
			bot.Send(msg)
		} else {
			msg := tgbotapi.NewMediaGroup(v, files)
			_, err := bot.SendMediaGroup(msg)
			log.Println(err)
		}
	}
}

func AddOrCreateChatIDS(chatId int64) {
	f, err := os.OpenFile("chatIds.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Println("Error openning file:", err)
		return
	}
	defer func() {
		if err := f.Close(); err != nil {
			log.Println("Error closing file:", err)
			return
		}
	}()

	_, err = f.WriteString(fmt.Sprint(chatId) + " ")
	if err != nil {
		log.Println("Error writting string:", err)
		return
	}
}

func LoadChatIds(filename string, chats *[]int64, chatStates map[int64]int) {
	b, err := os.ReadFile(filename)
	if err != nil {
		log.Println("Error loading ids:", err)
		return
	}
	chatIds := strings.Fields(string(b))
	for _, v := range chatIds {
		val, err := strconv.Atoi(v)
		if err != nil {
			log.Println("Error converting string to int64:", err)
			continue
		}
		*chats = append(*chats, int64(val))
		chatStates[int64(val)] = 0
	}
}
